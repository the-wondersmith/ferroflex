[project]

name = "ferroflex"
requires-python = ">=3.7"

[tool.poetry]

name = "ferroflex"
version = "0.0.1"
description = "A Python DB-API v2 compliant interface for DataFlex flat-file databases"
license = "AGPL-3.0-or-later"

authors = [
    "The Wondersmith <the@wondersmith.dev>",
]

readme = "README.md"
homepage = "https://github.com/the-wondersmith/ferroflex"
repository = "https://github.com/the-wondersmith/ferroflex"
documentation = "https://github.com/the-wondersmith/ferroflex"

packages = [
    { include = "ferroflex" },
]

classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Topic :: Database",
]


[tool.poetry.scripts]

register_dialect = "ferroflex.__main__:main"


[tool.poetry.dependencies]

python = ">=3.7,<4.0"
orjson = "^3.5"
sqlalchemy = "1.4.22"


[tool.poetry.group.dev.dependencies]

# Formatting & Linting
black = "^21.11-beta.1"
docformatter = "^1.4"
flake8 = "^3.9"
flake8-bugbear = "^21.4"
flake8-docstrings = "^1.6"
isort = "^5.10"
monkeytype = "^21.5.0"
mypy = "^0.910"
pre-commit = "^2.13"
pre-commit-hooks = "^4.0"
pydocstyle = "^6.1"
pylint = "^2.11"
sqlalchemy2-stubs = "*"
types-orjson = "^3.6.1"

# Testing
hypothesis = "^6.2*"
mimesis = "^4.1.3"
pytest = "^6.2"
pytest-cov = "^3.0"
pytest-describe = "^2.0"
pytest-expecter = "^2.2"
pytest-factoryboy = "^2.1"
pytest-flakefinder = "^1.0.0"
pytest-mimesis = "^1.1.0"
pytest-monkeytype = "*"
pytest-order = "^1.0"
pytest-rerunfailures = "^10"

# Reports & Logging
coverage = { version = "^6.0", extras = ["toml"] }


[tool.poetry-dynamic-versioning]

enable = true
vcs = "git"
format-jinja = """
    {%- if distance ==  0 -%}
        {{ base }}
    {%- elif not dirty -%}
        {{ base }}+{{ distance }}.{{ commit }}
    {%- else -%}
        {{ base }}+{{ distance }}.{{ commit }}.dirty
    {%- endif -%}
"""
style = "pep440"


[tool.poetry-dynamic-versioning.substitution]

files = ["./ferroflex/__init__.py"]


[tool.pytest.ini_options]

minversion = "6.2"
addopts = "--order-scope=session --disable-pytest-warnings --strict-markers --cov-config=pyproject.toml --cov-report html --no-cov-on-fail -r fEsxp"
cache_dir = "./.cache"
testpaths = [
    "tests",
]
markers = [
    "cli",
    "setup",
    "logger",
    "client",
    "plugin",
    "helpers",
    "service",
    "teardown",
    "structures",
    "describe_nested",
]


[tool.coverage.report]

fail_under = 50
show_missing = true


[tool.coverage.run]

source = ["ferroflex"]
omit = [
    "tests/*",
    "scratch*.py",
]


[tool.black]

color = true
safe = true
line-length = 120
target-version = ["py38"]
skip-string-normalization = false


[tool.isort]

profile = "black"
atomic = true
py_version = 39
verbose = false
remove_redundant_aliases = true
ensure_newline_before_comments = true
color_output = true
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 2
use_parentheses = true
line_length = 120
combine_as_imports = true
honor_noqa = true
skip_gitignore = true
default_section = "THIRDPARTY"
known_first_party = ["ferroflex"]
import_heading_future = "Future Imports"
import_heading_stdlib = "Standard Library Imports"
import_heading_thirdparty = "Third-Party Imports"
import_heading_firstparty = "Package-Level Imports"
import_heading_localfolder = "Imports From Package Sub-Modules"
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
src_paths = ["ferroflex", "tests"]


[tool.pylint.master]

jobs = 0
persistent = false


[tool.pylint.format]

max-module-lines = 3000


[tool.pylint.messages_control]

disable = [
    # Message Categories
    "C",  # convention checks
    "R",  # refactoring checks
    "W",  # various warnings
    # Handled by pre-commit-hooks
    "trailing-whitespace",
    "missing-final-newline",
    # Handled by flake8
    "line-too-long",
    "unused-import",
    "unused-variable",
    "too-many-branches",
    "undefined-variable",
    # Handled by isort
    "wrong-import-order",
    # Specific Messages
    "no-member",
    "bare-except",
    "file-ignored",
    "invalid-name",
    "bad-super-call",
    "locally-disabled",
    "bad-inline-option",
    "deprecated-pragma",
    "no-name-in-module",
    "raw-checker-failed",
    "suppressed-message",
    "useless-suppression",
    "c-extension-no-member",
    "use-symbolic-message-instead",
]


[tool.pylint.reports]

score = false


[tool.mypy]

cache_dir = ".cache/mypy/"
check_untyped_defs = true
error_summary = true
exclude = "/tests/"
ignore_errors = true
ignore_missing_imports = true
install_types = false
follow_imports = "silent"
strict = false
pretty = true
python_version = 3.8
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_none_errors = false
strict_optional = false


[build-system]
requires = ["maturin>=0.12,<0.13", "poetry-core", "poetry-dynamic-versioning"]
build-backend = "maturin"
